// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// ユーザーテーブル（学生、企業、管理者）
model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String? // パスワードレス認証のためオプショナルに変更
  role     UserRole
  isActive Boolean  @default(true)

  // NextAuth.js用フィールド
  name          String?
  image         String?
  emailVerified DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 学生プロフィール
  studentProfile StudentProfile?
  // 企業プロフィール
  companyProfile CompanyProfile?
  // 管理者プロフィール
  adminProfile   AdminProfile?

  // リレーション
  applications  Application[]
  badgeRequests BadgeRequest[]
  authTokens    AuthToken[] // 認証トークンとの関係を追加

  // NextAuth.js用リレーション
  accounts Account[]
  sessions Session[]

  @@map("users")
}

// NextAuth.js用のアカウントテーブル
model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth.js用のセッションテーブル
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// NextAuth.js用の認証トークンテーブル（メール認証等）
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// ユーザーロール
enum UserRole {
  STUDENT
  COMPANY
  ADMIN
}

// 学生プロフィール
model StudentProfile {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  firstName      String
  lastName       String
  phoneNumber    String?
  university     String?
  major          String?
  graduationYear Int?
  gpa            Float?
  bio            String?
  skills         String? // スキルタグの配列をJSONとして保存
  profileImage   String?
  portfolio      String?
  linkedinUrl    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 企業プロフィール
model CompanyProfile {
  id           Int     @id @default(autoincrement())
  userId       Int     @unique
  companyName  String
  industry     String?
  companySize  String?
  website      String?
  description  String?
  logoUrl      String?
  contactEmail String?
  contactPhone String?
  address      String?
  foundedYear  Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  programs Program[]

  @@map("company_profiles")
}

// 管理者プロフィール
model AdminProfile {
  id        Int     @id @default(autoincrement())
  userId    Int     @unique
  firstName String
  lastName  String
  position  String? // 協議会での役職

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admin_profiles")
}

// アンバサダープログラム
model Program {
  id        Int            @id @default(autoincrement())
  companyId Int
  company   CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)

  title                String
  description          String
  requirements         String? // 応募要件
  responsibilities     String? // 業務内容
  benefits             String? // 特典・給与
  applicationStartDate DateTime?
  applicationEndDate   DateTime?
  startDate            DateTime?
  endDate              DateTime?
  maxParticipants      Int?
  status               ProgramStatus @default(DRAFT)
  tags                 String? // プログラムタグをJSONとして保存
  isPublic             Boolean       @default(true)

  applications Application[]
  badges       Badge[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
  @@index([status])
  @@index([isPublic])
}

// プログラム状態
enum ProgramStatus {
  DRAFT // 下書き
  PUBLISHED // 公開中
  CLOSED // 応募締切
  ONGOING // 実施中
  COMPLETED // 完了
  CANCELLED // 中止
}

// 応募情報
model Application {
  id                 Int               @id @default(autoincrement())
  motivation         String // 志望動機
  experience         String? // 関連経験
  portfolioUrl       String? // ポートフォリオURL
  availableStartDate DateTime? // 開始可能日
  status             ApplicationStatus @default(PENDING)
  rejectionReason    String? // 不採用理由
  interviewDate      DateTime? // 面接日時
  notes              String? // 企業側メモ

  studentId Int
  programId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student User    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  program Program @relation(fields: [programId], references: [id], onDelete: Cascade)

  // 複合ユニーク制約（同じ学生が同じプログラムに複数回応募できない）
  @@unique([studentId, programId])
  @@map("applications")
}

// 応募状態
enum ApplicationStatus {
  PENDING // 申請中
  UNDER_REVIEW // 選考中
  SHORTLISTED // 書類通過
  INTERVIEW_SCHEDULED // 面接予定
  ACCEPTED // 採用
  REJECTED_BY_COMPANY // 企業による不採用
  WITHDRAWN_BY_STUDENT // 学生による辞退
}

// バッジ
model Badge {
  id          Int     @id @default(autoincrement())
  badgeType   String // バッジタイプ
  title       String // バッジタイトル
  description String? // バッジ説明
  imageUrl    String? // バッジ画像URL
  criteria    String? // 取得条件

  programId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  program       Program        @relation(fields: [programId], references: [id], onDelete: Cascade)
  badgeRequests BadgeRequest[]

  @@map("badges")
}

// バッジ発行申請
model BadgeRequest {
  id              Int                @id @default(autoincrement())
  achievements    String // 成果・実績
  evidence        String? // 証拠・エビデンス
  selfEvaluation  String? // 自己評価
  status          BadgeRequestStatus @default(PENDING)
  reviewComment   String? // 審査コメント
  approvedBy      Int? // 承認者ID
  approvedAt      DateTime? // 承認日時
  rejectedBy      Int? // 却下者ID
  rejectedAt      DateTime? // 却下日時
  rejectionReason String? // 却下理由

  studentId Int
  badgeId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student User  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  badge   Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  // 複合ユニーク制約（同じ学生が同じバッジに複数回申請できない）
  @@unique([studentId, badgeId])
  @@map("badge_requests")
}

// バッジ申請状態
enum BadgeRequestStatus {
  PENDING // 申請中
  APPROVED // 承認済み
  REJECTED // 却下
}

// 認証トークンテーブル（マジックリンク用）
model AuthToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  role      UserRole
  expiresAt DateTime
  used      Boolean  @default(false)
  userId    Int? // ユーザーが既に存在する場合のID

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([token])
  @@index([email])
  @@index([expiresAt])
  @@map("auth_tokens")
}
